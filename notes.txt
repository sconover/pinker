There's not much to pinker.  It allows you to organize a certain kind of code.

It extracts an aspect from your class - validation logic, sanity checking, policing code - puts a certain amount of structure around it.  If you have a lot of this kind of code, Pinker allows you to separate concerns.

Validation logic vs sanity checking / policing.
Gray areas...there are not bright lines between them.
But making the distinction can be useful...
  - stuff you want active at design time vs run time
  ...put another way - stuff intended for your eyes vs users' eyes

You want to be able to turn either of these on or off independently
  - sanity on/off: test/dev mode vs production
  - validation on/off: code used w/ real users vs same code reused in a trusted setting like import.

=========================

So then what's the value of pinker?  There's not much to it.  Is there in fact anything worthwhile there?

...well that's the nature of any useful validation library.  Validation is hard to pin down, it can be just about any kind of logic you can think up.  Pinker reflects that, I think.  It's (hopefully) humble and not "overspecified".

- Organization.  Just enough structure that you can organize your validation logic.  If successful the organization will promote reuse.

- Instance-oriented.  Where a typical validation approach might assume a Class, Pinker is oriented around instances.  So you can validate that one Array or Hash.  Think duck-typing.

You want to validate the *state* of an object.

A simple goal is to get all the defensive coding and exception-throwing out of your classes.
After a grammar check you should be able to trust that things are in the forms you expect them to be.